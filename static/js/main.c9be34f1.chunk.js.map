{"version":3,"sources":["components/NavBar.js","components/Login.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","className","href","React","Component","withRouter","Login","message","isLogin","login","e","preventDefault","signup","val","this","setState","token","sessionStorage","getItem","console","log","to","pathname","form","onSubmit","type","id","htmlFor","onFocusCapture","window","focus","switchMode","style","cursor","onClick","switchModes","Home","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c9be34f1.chunk.js","sourcesContent":["import React from 'react';\nimport { Redirect, withRouter } from 'react-router-dom';\n\nclass NavBar extends React.Component {\n  state = {}\n  render() {\n    return (<nav className=\"nav-wrapper teal darken-4\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"brand-logo\">Music ML</a>\n        <ul className=\"right\">\n          <li>\n            <div className=\"btn\">Profile</div>\n          </li>\n        </ul>\n      </div>\n    </nav>);\n  }\n}\n\nexport default withRouter(NavBar);","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n// import axios from 'axios';\nimport NavBar from './NavBar';\n\nclass Login extends React.Component {\n  state = {\n    message: '',\n    isLogin: true,\n  }\n  login = (e) => {\n    e.preventDefault();\n    // TODO: Login\n  }\n  signup = (e) => {\n    e.preventDefault();\n    // TODO: Signup\n  }\n  switchModes(val) {\n    this.setState({isLogin: val})\n  }\n  render() {\n    // Check if Logged in...\n    let token = sessionStorage.getItem('token');\n    console.log(token);\n    if (token) {\n      return (<Redirect to={{pathname: '/'}} />);\n    }\n    // Login or Signup Form\n    let form = this.state.isLogin ? (\n      <form onSubmit={(e) => this.login(e)}>\n        <div className=\"input-field\">\n          <i className=\"material-icons prefix\">person</i>\n          <input type=\"text\" id=\"username\" />\n          <label htmlFor=\"username\" onFocusCapture={() => window.focus()}>username</label>\n        </div>\n        <div className=\"input-field\">\n          <i className=\"material-icons prefix\">vpn_key</i>\n          <input type=\"password\" id=\"password\" />\n          <label htmlFor=\"password\" onFocusCapture={() => window.focus()}>password</label>\n        </div>\n        <div className=\"input-field center\">\n          <button className=\"btn\">Login</button>\n        </div>\n      </form>\n    ) : (\n      <form onSubmit={(e) => this.signup(e)}>\n        <div className=\"input-field\">\n          <i className=\"material-icons prefix\">person_add</i>\n          <input type=\"text\" id=\"name\" />\n          <label htmlFor=\"name\" onFocusCapture={() => window.focus()}>Full Name</label>\n        </div>\n        <div className=\"input-field\">\n          <i className=\"material-icons prefix\">person</i>\n          <input type=\"text\" id=\"username\" />\n          <label htmlFor=\"username\" onFocusCapture={() => window.focus()}>username</label>\n        </div>\n        <div className=\"input-field\">\n          <i className=\"material-icons prefix\">vpn_key</i>\n          <input type=\"password\" id=\"password\" />\n          <label htmlFor=\"password\" onFocusCapture={() => window.focus()}>password</label>\n        </div>\n        <div className=\"input-field center\">\n          <button className=\"btn\">Login</button>\n        </div>\n      </form>\n    );\n    // Switch login and signup\n    let switchMode = this.state.isLogin ? (\n      <div className=\"center\">\n        <p>Don't have a account? \n          <span className=\"indigo-text\" style={{cursor: 'pointer'}} onClick={(e) => this.switchModes(false)}>\n          Sign Up\n          </span>\n        </p>\n      </div>\n    ) : (\n      <div className=\"center\">\n        <p>Already have a account? \n          <span className=\"indigo-text\" style={{cursor: 'pointer'}} onClick={(e) => this.switchModes(true)}>\n          Login\n          </span>\n        </p>\n      </div>\n    );\n    // return Login Page\n    return (<div>\n      <NavBar />\n      <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"col s12 l6 offset-l3\">{form}</div>\n        </div>\n        {switchMode}\n      </div>\n    </div>);\n  }\n}\n\nexport default Login;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport NavBar from './NavBar';\n\nclass Home extends React.Component {\n  render() {\n    let token = sessionStorage.getItem('token');\n    if (token) {\n      return (\n        <div>\n        <NavBar />\n        </div>\n      );\n    } else {\n      return (<Redirect to={{pathname: '/login'}} />);\n    }\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './components/Login';\nimport Home from './components/Home';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/login' component={Login} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}